grepl('(?i)estrés|(?i)stress', functionalities_dirty) ~ 'Stress',
grepl('(?i)noise|(?i)ruido', functionalities_dirty) ~ 'Noise',
grepl('(?i)hora', functionalities_dirty) ~ NA,
TRUE ~ functionalities_dirty
))
functionalities_grouped_rows <- mutate(functionalities_rows, functionalities = case_when(
grepl('(?i)deporte|(?i)sport|(?i)pasos', functionalities_dirty) ~ 'Sports',
grepl('(?i)presión arterial|(?i)blood', functionalities_dirty) ~ 'Blood pressure',
grepl('(?i)calorías|(?i)calorias|(?i)calories', functionalities_dirty) ~ 'Calories',
grepl('(?i)distancia|(?i)distance', functionalities_dirty) ~ 'Distance',
grepl('(?i)cardíaco|(?i)heart', functionalities_dirty) ~ 'Heart rate',
grepl('(?i)sueño|(?i)sleep', functionalities_dirty) ~ 'Sleep',
grepl('(?i)agua|(?i)water', functionalities_dirty) ~ 'Water',
grepl('(?i)peso|(?i)weight', functionalities_dirty) ~ 'Weight',
grepl('(?i)temperatura|(?i)temperature', functionalities_dirty) ~ 'Temperature',
grepl('(?i)menstrual', functionalities_dirty) ~ 'Menstrual health',
grepl('(?i)altitud|(?i)altitude|elevation', functionalities_dirty) ~ 'Altitude',
grepl('(?i)oxigeno|(?i)oxígeno', functionalities_dirty) ~ 'Oxygen',
grepl('(?i)estrés|(?i)stress', functionalities_dirty) ~ 'Stress',
grepl('(?i)noise|(?i)ruido', functionalities_dirty) ~ 'Noise',
grepl('(?i)hora', functionalities_dirty) ~ NA,
TRUE ~ functionalities_dirty
))
unique(functionalities_grouped_rows['functionalities'])
activities_rows <- separate_longer_delim(activities_dirty, activities_dirty, ', ')
activities_dirty <- select(swu, timestamp, gender, age, location, periodicity, brand, activities_dirty)
activities_rows <- separate_longer_delim(activities_dirty, user_activities, ', ')
activities_rows <- separate_longer_delim(activities_dirty, activities_dirty, ', ')
unique(user_rows['activities_dirty'])
unique(activities_rows['activities_dirty'])
activities_grouped_rows <- mutate(activities_rows, activities = case_when(
grepl('(?i)caminata|(?i)pasos', activities_dirty) ~ 'Walking',
grepl('(?i)hiking|(?i)trakking|(?i)senderismo', activities_dirty) ~ 'Hiking / Trekking',
grepl('(?i)natación|(?i)natacion', activities_dirty) ~ 'Swimming',
grepl('(?i)gimnasio|(?i)gym|(?i)entrenamiento', activities_dirty) ~ 'General gym training',
grepl('(?i)fuerza|(?i)crossfit|(?i)funcional|(?i)cross|(?i)strong|(?i)fitness|(?i)weight|(?i)strength|(?i)workouts', activities_dirty) ~ 'Strength and endurance sports',
grepl('(?i)pilates|(?i)yoga|(?i)stretching|(?i)meditation', activities_dirty) ~ 'Relaxing sports',
grepl('(?i)ninguna|(?i)hora', activities_dirty) ~ NA,
grepl('(?i)tenis', activities_dirty) ~ 'Tennis',
grepl('(?i)correr', activities_dirty) ~ 'Running',
grepl('(?i)ciclismo', activities_dirty) ~ 'Cycling',
grepl('(?i)futbol', activities_dirty) ~ 'Football / Soccer',
grepl('(?i)enduro', activities_dirty) ~ 'Enduro motorcycle',
grepl('(?i)splitboard', activities_dirty) ~ 'Splitboarding',
grepl('(?i)buceo', activities_dirty) ~ 'Diving',
grepl('(?i)patinar', activities_dirty) ~ 'Skating',
grepl('(?i)escalada', activities_dirty) ~ 'Climbing',
grepl('(?i)esqui|(?i)esquí|(?i)ski', activities_dirty) ~ 'Skiing',
grepl('(?i)bailar|(?i)dancing', activities_dirty) ~ 'Dancing',
TRUE ~ activities_dirty
))
unique(activities_grouped_rows['activities'])
install.packages('ggplot2')
install.packages('lessR')
install.packages("ggplot2")
install.packages('scales')
library(ggplot2)
library(lessR)
library(scales)
install.packages("scales")
gender_table <- table(swu['gender'])
PieChart(gender_table, hole = 0, values = "%", main = "")
gender_table <- table(swu['gender'])
PieChart(gender_table, hole = 0, values = "%", main = "") +
scale_fill_brewer(palette="Blues")+
theme_minimal()
?PieChart
gender_table <- table(swu['gender'])
PieChart(gender_table, hole = 0, values = "%", main = "", fill = "oranges")
gender_table <- table(swu['gender'])
PieChart(gender_table, hole = 0, values = "%", main = "", fill = "reds")
install.packages('ggplot2')
install.packages('lessR')
install.packages('scales')
install.packages('ggthemr')
library(ggplot2)
library(lessR)
library(scales)
library(ggthemr)
install.packages("lessR")
install.packages("scales")
install.packages("ggplot2")
install.packages("ggplot2")
age_perc <- swu %>%
group_by(gender, age) %>%
summarise(count = n()) %>%
mutate(perc = count/sum(count))
# Chart
ggplot(age_perc, aes(x = factor(gender), y = perc*100, fill = factor(age))) +
geom_bar(stat="identity", width = 0.7, position="fill") +
labs(x = "Gender", y = "Percent", fill = "age", title = 'Percentage distribution of age groups') +
theme_minimal(base_size = 14) +
geom_text(data = age_perc, aes(y = count, label = percent(perc, 0)), position = position_fill(vjust = 0.5)) +
scale_y_continuous(labels = scales::percent_format(accuracy = 5L)) +
guides(fill = guide_legend(title = "Age groups")) +
theme_calc() +
scale_colour_calc()
?geom_bar
?ggplot
age_perc <- swu %>%
group_by(gender, age) %>%
summarise(count = n()) %>%
mutate(perc = count/sum(count))
# Chart
ggplot(age_perc, aes(x = factor(gender), y = perc*100, fill = factor(age))) +
geom_bar(stat="identity", width = 0.7, position="fill") +
labs(x = "Gender", y = "Percent", fill = "age", title = 'Percentage distribution of age groups') +
theme_minimal(base_size = 14) +
geom_text(data = age_perc, aes(y = count, label = percent(perc, 0)), position = position_fill(vjust = 0.5)) +
scale_y_continuous(labels = scales::percent_format(accuracy = 5L)) +
guides(fill = guide_legend(title = "Age groups"))
age_perc <- swu %>%
group_by(gender, age) %>%
summarise(count = n()) %>%
mutate(perc = count/sum(count))
# Chart
ggplot(age_perc, aes(x = factor(gender), y = perc*100, fill = factor(age))) +
geom_bar(stat="identity", width = 0.7, position="fill") +
labs(x = "Gender", y = "Percent", fill = "age", title = 'Percentage distribution of age groups') +
theme_minimal(base_size = 14) +
geom_text(data = age_perc, aes(y = count, label = percent(perc, 0)), position = position_fill(vjust = 0.5)) +
scale_y_continuous(labels = scales::percent_format(accuracy = 5L)) +
guides(fill = guide_legend(title = "Age groups"))
swu %>%
ggplot(aes(x = factor(periodicity), fill = "orange", alpha=.6, width=.4)) +
geom_bar() +
theme(legend.position="none")+
labs(x = "Days", y = "Count", title = 'Days of usage of smartwatches')
# Reorder from highest frequency to lowest frequency
swu %>%
ggplot(aes(x = fct_rev(fct_infreq(brand_cleaned)), fill = "orange", alpha=.6, width=.4)) +
geom_bar() +
coord_flip() +
theme(legend.position="none")+
labs(x = "Brand", y = "Count", title = 'Popular brands of smartwatches')
# Reorder from highest frequency to lowest frequency
swu %>%
ggplot(aes(x = fct_rev(fct_infreq(brand)), fill = "orange", alpha=.6, width=.4)) +
geom_bar() +
coord_flip() +
theme(legend.position="none")+
labs(x = "Brand", y = "Count", title = 'Popular brands of smartwatches')
# Reorder from highest frequency to lowest frequency
swu %>% drop_na(brand)
ggplot(aes(x = fct_rev(fct_infreq(brand)), fill = "orange", alpha=.6, width=.4)) +
geom_bar() +
coord_flip() +
theme(legend.position="none")+
labs(x = "Brand", y = "Count", title = 'Popular brands of smartwatches')
# Reorder from highest frequency to lowest frequency
swu %>% drop_na(brand) %>%
ggplot(aes(x = fct_rev(fct_infreq(brand)), fill = "orange", alpha=.6, width=.4)) +
geom_bar() +
coord_flip() +
theme(legend.position="none")+
labs(x = "Brand", y = "Count", title = 'Popular brands of smartwatches')
age_perc <- swu %>%
group_by(gender, age) %>%
summarise(count = n()) %>%
mutate(perc = count/sum(count))
# Chart
ggplot(age_perc, aes(x = factor(gender), y = perc*100, fill = factor(age))) +
geom_bar(stat="identity", width = 0.7, position="fill") +
labs(x = "Gender", y = "Percent", fill = "age", title = 'Percentage distribution of age groups') +
theme_minimal(base_size = 14) +
geom_text(data = age_perc, aes(y = count, label = percent(perc, 0)), position = position_fill(vjust = 0.5)) +
scale_y_continuous(labels = scales::percent_format(accuracy = 5L)) +
guides(fill = guide_legend(title = "Age groups"))
swu %>%
ggplot(aes(x = factor(periodicity), fill = "orange", alpha=.6, width=.4)) +
geom_bar() +
theme(legend.position="none")+
labs(x = "Days", y = "Count", title = 'Days of usage of smartwatches')
# Reorder from highest frequency to lowest frequency
swu %>%
ggplot(aes(x = fct_rev(fct_infreq(usage)), fill = "orange", alpha=.6, width=.4)) +
geom_bar() +
coord_flip() +
theme(legend.position="none")+
labs(x = "Main usage", y = "Count", title = 'Main usage of smartwatches')
# Reorder from highest frequency to lowest frequency
features_rows %>%
ggplot(aes(x = fct_rev(fct_infreq(features)), fill = "orange", alpha=.6, width=.4)) +
geom_bar() +
coord_flip() +
theme(legend.position="none")+
labs(x = "Features", y = "Count", title = 'Popular features of smartwatches')
# Reorder from highest frequency to lowest frequency
features_grouped_rows %>%
ggplot(aes(x = fct_rev(fct_infreq(features_grouped)), fill = "orange", alpha=.6, width=.4)) +
geom_bar() +
coord_flip() +
theme(legend.position="none")+
labs(x = "Features", y = "Count", title = 'Popular grouped features of smartwatches')
# Reorder from highest frequency to lowest frequency
functionalities_grouped_rows %>%
ggplot(aes(x = fct_rev(fct_infreq(functionalities)), fill = "orange", alpha=.6, width=.4)) +
geom_bar() +
coord_flip() +
theme(legend.position="none")+
labs(x = "Tracked functionalities", y = "Count", title = 'Popular tracked functionalities of smartwatches')
# Reorder from highest frequency to lowest frequency
functionalities_grouped_rows %>% drop_na(functionalities) %>%
ggplot(aes(x = fct_rev(fct_infreq(functionalities)), fill = "orange", alpha=.6, width=.4)) +
geom_bar() +
coord_flip() +
theme(legend.position="none")+
labs(x = "Tracked functionalities", y = "Count", title = 'Popular tracked functionalities of smartwatches')
# Reorder from highest frequency to lowest frequency
activities_grouped_rows %>% drop_na(activities) %>%
ggplot(aes(x = fct_rev(fct_infreq(activities)), fill = "orange", alpha=.6, width=.4)) +
geom_bar() +
coord_flip() +
theme(legend.position="none")+
labs(x = "User activities", y = "Count", title = 'Popular activities tracked by users')
# Reorder from highest frequency to lowest frequency
activities_grouped_rows %>% drop_na(activities) %>%
ggplot(aes(x = fct_rev(fct_infreq(activities)), fill = "orange", alpha=.6, width=.4)) +
geom_bar() +
coord_flip() +
theme(legend.position="none")+
labs(x = "Sport activities", y = "Count", title = 'Popular sport activities tracked by users')
gender_main_usage <- swu %>%
group_by(gender, usage) %>%
summarise(count = n()) %>%
mutate(perc = count/sum(count)) %>%
drop_na(usage)
# Chart
ggplot(gender_main_usage, aes(x = factor(gender), y = perc*100, fill = factor(usage))) +
geom_bar(stat="identity", width = 0.7, position="fill") +
labs(x = "Gender", y = "Percent", fill = "usage", title = "Percentage distribution of 'Usage' per Gender") +
theme_minimal(base_size = 14) +
geom_text(data = gender_main_usage, aes(y = count, label = percent(perc, 0)), position = position_fill(vjust = 0.5)) +
scale_y_continuous(labels = scales::percent_format(accuracy = 5L)) +
guides(fill=guide_legend(title="Usage"))
gender_main_usage <- swu %>%
group_by(gender, usage) %>%
summarise(count = n()) %>%
mutate(perc = count/sum(count)) %>%
drop_na(usage)
# Chart
ggplot(gender_main_usage, aes(x = factor(gender), y = perc*100, fill = factor(usage))) +
geom_bar(stat="identity", width = 0.7, position="fill") +
labs(x = "Gender", y = "Percent", fill = "usage", title = "Percentage distribution of 'Usage' per Gender") +
theme_minimal(base_size = 14) +
geom_text(data = gender_main_usage, aes(y = count, label = percent(perc, 0)), position = position_fill(vjust = 0.5)) +
scale_y_continuous(labels = scales::percent_format(accuracy = 5L)) +
guides(fill=guide_legend(title="Usage"))
gender_main_usage <- swu %>%
group_by(gender, usage) %>%
summarise(count = n()) %>%
mutate(perc = count/sum(count)) %>%
drop_na(usage)
# Chart
ggplot(gender_main_usage, aes(x = factor(gender), y = perc*100, fill = factor(usage))) +
geom_bar(stat="identity", width = 0.7, position="fill") +
labs(x = "Gender", y = "Percent", fill = "usage", title = "Percentage distribution of 'Usage' per Gender") +
theme_minimal(base_size = 14) +
geom_text(data = gender_main_usage, aes(y = count, label = percent(perc, 0)), position = position_fill(vjust = 0.5)) +
scale_y_continuous(labels = scales::percent_format(accuracy = 5L)) +
guides(fill=guide_legend(title="Usage"))
View(gender_main_usage)
gender_main_usage <- swu %>%
group_by(gender, usage) %>%
summarise(count = n()) %>%
mutate(perc = count/sum(count))
# Chart
ggplot(gender_main_usage, aes(x = factor(gender), y = perc*100, fill = factor(usage))) +
geom_bar(stat="identity", width = 0.7, position="fill") +
labs(x = "Gender", y = "Percent", fill = "usage", title = "Percentage distribution of 'Usage' per Gender") +
theme_minimal(base_size = 14) +
geom_text(data = gender_main_usage, aes(y = count, label = percent(perc, 0)), position = position_fill(vjust = 0.5)) +
scale_y_continuous(labels = scales::percent_format(accuracy = 5L)) +
guides(fill=guide_legend(title="Usage"))
guides(fill=guide_legend(title="Usage"))
View(gender_main_usage)
age_main_usage <- swu %>%
group_by(age, usage) %>%
summarise(count = n()) %>%
mutate(perc = count/sum(count)) %>%
drop_na(usage)
# Chart
ggplot(age_main_usage, aes(x = factor(age), y = perc*100, fill = factor(usage))) +
geom_bar(stat="identity", width = 0.7, position="fill") +
labs(x = "Age", y = "Percent", fill = "usage", title = "Percentage distribution of 'Main usage' per Age") +
theme_minimal(base_size = 14) +
geom_text(data = age_main_usage, aes(y = count, label = percent(perc, 0)), position = position_fill(vjust = 0.5)) +
scale_y_continuous(labels = scales::percent_format(accuracy = 5L)) +
guides(fill=guide_legend(title="Usage")) +
theme(axis.text.x = element_text(angle = 45))
View(features_grouped_rows)
gender_features <- features_grouped_rows %>%
group_by(gender, features_grouped) %>%
summarise(count = n()) %>%
mutate(perc = count/sum(count)) %>%
drop_na(features_grouped)
# Chart
ggplot(gender_features, aes(x = factor(gender), y = perc*100, fill = factor(features_grouped))) +
geom_bar(stat="identity", width = 0.7, position="fill") +
labs(x = "Gender", y = "Percent", fill = "features_grouped", title = "Percentage distribution of 'Features' per Gender") +
theme_minimal(base_size = 14) +
geom_text(data = gender_features, aes(y = count, label = percent(perc, 0)), position = position_fill(vjust = 0.5)) +
scale_y_continuous(labels = scales::percent_format(accuracy = 5L)) +
guides(fill=guide_legend(title="Features"))
age_features <- features_grouped_rows %>%
group_by(age, features_grouped) %>%
summarise(count = n()) %>%
mutate(perc = count/sum(count)) %>%
drop_na(features_grouped)
# Chart
ggplot(age_features, aes(x = factor(age), y = perc*100, fill = factor(features_grouped))) +
geom_bar(stat="identity", width = 0.7, position="fill") +
labs(x = "Age", y = "Percent", fill = "features_grouped", title = "Percentage distribution of 'Features' per Age") +
theme_minimal(base_size = 14) +
geom_text(data = age_features, aes(y = count, label = percent(perc, 0)), position = position_fill(vjust = 0.5)) +
scale_y_continuous(labels = scales::percent_format(accuracy = 5L)) +
guides(fill=guide_legend(title="Features")) +
theme(axis.text.x = element_text(angle = 45))
gender_functionalities <- functionalities_grouped_rows %>%
group_by(gender, functionalities) %>%
summarise(count = n()) %>%
mutate(perc = count/sum(count)) %>%
drop_na(functionalities)
# Chart
ggplot(gender_functionalities, aes(x = factor(gender), y = perc*100, fill = factor(functionalities))) +
geom_bar(stat="identity", width = 0.7, position="fill") +
labs(x = "Gender", y = "Percent", fill = "functionalities", title = "Percentage distribution of 'Functionalities' per Gender") +
theme_minimal(base_size = 14) +
geom_text(data = gender_functionalities, aes(y = count, label = percent(perc, 0)), position = position_fill(vjust = 0.5)) +
scale_y_continuous(labels = scales::percent_format(accuracy = 5L)) +
guides(fill=guide_legend(title="Functionalities"))
age_functionalities <- tracked_functionalities_grouped_rows %>%
group_by(age_cleaned, tracked_functionalities_cleaned) %>%
summarise(count = n()) %>%
mutate(perc = count/sum(count)) %>%
drop_na(tracked_functionalities_cleaned)
# Chart
ggplot(age_functionalities, aes(x = factor(age_cleaned), y = perc*100, fill = factor(tracked_functionalities_cleaned))) +
geom_bar(stat="identity", width = 0.7, position="fill") +
labs(x = "Age", y = "Percent", fill = "tracked_functionalities_cleaned", title = "Percentage distribution of 'Functionalities' per Age") +
theme_minimal(base_size = 14) +
geom_text(data = age_functionalities, aes(y = count, label = percent(perc, 0)), position = position_fill(vjust = 0.5)) +
scale_y_continuous(labels = scales::percent_format(accuracy = 5L)) +
guides(fill=guide_legend(title="Functionalities")) +
theme(axis.text.x = element_text(angle = 45))
age_functionalities <- functionalities_grouped_rows %>%
group_by(age, functionalities) %>%
summarise(count = n()) %>%
mutate(perc = count/sum(count)) %>%
drop_na(functionalities)
# Chart
ggplot(age_functionalities, aes(x = factor(age), y = perc*100, fill = factor(functionalities))) +
geom_bar(stat="identity", width = 0.7, position="fill") +
labs(x = "Age", y = "Percent", fill = "functionalities", title = "Percentage distribution of 'Functionalities' per Age") +
theme_minimal(base_size = 14) +
geom_text(data = age_functionalities, aes(y = count, label = percent(perc, 0)), position = position_fill(vjust = 0.5)) +
scale_y_continuous(labels = scales::percent_format(accuracy = 5L)) +
guides(fill=guide_legend(title="Functionalities")) +
theme(axis.text.x = element_text(angle = 45))
gender_activities <- activities_grouped_rows %>%
group_by(gender, activities) %>%
summarise(count = n()) %>%
mutate(perc = count/sum(count)) %>%
drop_na(activities)
# Chart
ggplot(gender_activities, aes(x = factor(gender), y = perc*100, fill = factor(activities))) +
geom_bar(stat="identity", width = 0.7, position="fill") +
labs(x = "Gender", y = "Percent", fill = "activities", title = "Percentage distribution of 'Activities' per Gender") +
theme_minimal(base_size = 14) +
geom_text(data = gender_activities, aes(y = count, label = percent(perc, 0)), position = position_fill(vjust = 0.5)) +
scale_y_continuous(labels = scales::percent_format(accuracy = 5L)) +
guides(fill=guide_legend(title="Activities"))
age_activities <- activities_grouped_rows %>%
group_by(age, activities) %>%
summarise(count = n()) %>%
mutate(perc = count/sum(count)) %>%
drop_na(activities)
# Chart
ggplot(age_activities, aes(x = factor(age), y = perc*100, fill = factor(activities))) +
geom_bar(stat="identity", width = 0.7, position="fill") +
labs(x = "Age", y = "Percent", fill = "activities", title = "Percentage distribution of 'Activities' per Age") +
theme_minimal(base_size = 14) +
geom_text(data = age_activities, aes(y = count, label = percent(perc, 0)), position = position_fill(vjust = 0.5)) +
scale_y_continuous(labels = scales::percent_format(accuracy = 5L)) +
guides(fill=guide_legend(title="Activities")) +
theme(axis.text.x = element_text(angle = 45))
library(dplyr) # For data wrangling/pipes e.g. %>%
library(sf) # For spatial data
library(rnaturalearth) # For map data
install.packages("rnaturalearth")
install.packages("sf")
# library(dplyr) # For data wrangling/pipes e.g. %>%
library(sf) # For spatial data
library(rnaturalearth) # For map data
install.packages("sf")
#library(ggplot2) # For plotting
# Tell sf to treat world map data as a 'flat' surface instead of a sphere
sf_use_s2(FALSE)
# Import world map, dissolve/union polygons by continent, and add bubble lon/lat
# locations for plotting
continents <- ne_countries(returnclass='sf') %>%
# Russia has incorrect continent value, so need to change it
mutate(continent = ifelse(sovereignt == "Russia", "Asia", continent)) %>%
group_by(continent) %>%
summarise(geom = st_union(geometry)) %>%
filter(!continent == "Seven seas (open ocean)") %>%
mutate(centroid_lon = st_coordinates(st_centroid(.))[,1],
centroid_lat = st_coordinates(st_centroid(.))[,2])
# Your count data
dat <- read.table(text = "Africa;1
Asia;3
Europe;13
North America;8
South America;122", header = FALSE, sep = ";")
colnames(dat) <- c("continent", "count")
# Join count data to continents
continents <- left_join(continents, dat, by = "continent")
# Plot
ggplot(data = continents) +
geom_sf() +
geom_point(aes(x = centroid_lon, y = centroid_lat, size = count)) +
scale_size(range = c(1, 10)) +
labs(size = "Count") +
theme(axis.title = element_blank())
# It is a good habit to turn S2 back on after you are done
sf_use_s2(TRUE)
sf_use_s2(FALSE)
continents <- ne_countries(returnclass='sf') %>%
# Russia has incorrect continent value, so need to change it
mutate(continent = ifelse(sovereignt == "Russia", "Asia", continent)) %>%
group_by(continent) %>%
summarise(geom = st_union(geometry)) %>%
filter(!continent == "Seven seas (open ocean)") %>%
mutate(centroid_lon = st_coordinates(st_centroid(.))[,1],
centroid_lat = st_coordinates(st_centroid(.))[,2])
continents <- ne_countries(returnclass='sf')
continents
continents <- ne_countries(returnclass='sf') %>%
# Russia has incorrect continent value, so need to change it
mutate(continent = ifelse(sovereignt == "Russia", "Asia", continent)) %>%
group_by(continent) %>%
summarise(geom = st_union(geometry)) %>%
filter(!continent == "Seven seas (open ocean)")
sf_use_s2(FALSE)
continents <- ne_countries(returnclass='sf') %>%
# Russia has incorrect continent value, so need to change it
mutate(continent = ifelse(sovereignt == "Russia", "Asia", continent)) %>%
group_by(continent) %>%
summarise(geom = st_union(geometry)) %>%
filter(!continent == "Seven seas (open ocean)") %>%
mutate(centroid_lon = st_coordinates(st_centroid(.))[,1],
centroid_lat = st_coordinates(st_centroid(.))[,2])
dat <- read.table(text = "Africa;1
Asia;3
Europe;13
North America;8
South America;122", header = FALSE, sep = ";")
colnames(dat) <- c("continent", "count")
continents <- left_join(continents, dat, by = "continent")
ggplot(data = continents) +
geom_sf() +
geom_point(aes(x = centroid_lon, y = centroid_lat, size = count)) +
scale_size(range = c(1, 10)) +
labs(size = "Count") +
theme(axis.title = element_blank())
sf_use_s2(TRUE)
install.packages("rnaturalearth")
install.packages("sf")
# library(dplyr) # For data wrangling/pipes e.g. %>%
library(sf) # For spatial data
library(rnaturalearth) # For map data
#library(ggplot2) # For plotting
# Tell sf to treat world map data as a 'flat' surface instead of a sphere
sf_use_s2(FALSE)
# Import world map, dissolve/union polygons by continent, and add bubble lon/lat
# locations for plotting
continents <- ne_countries(returnclass='sf') %>%
# Russia has incorrect continent value, so need to change it
mutate(continent = ifelse(sovereignt == "Russia", "Asia", continent)) %>%
group_by(continent) %>%
summarise(geom = st_union(geometry)) %>%
filter(!continent == "Seven seas (open ocean)") %>%
mutate(centroid_lon = st_coordinates(st_centroid(.))[,1],
centroid_lat = st_coordinates(st_centroid(.))[,2])
# Your count data
dat <- read.table(text = "Africa;1
Asia;3
Europe;13
North America;8
South America;122", header = FALSE, sep = ";")
colnames(dat) <- c("continent", "count")
# Join count data to continents
continents <- left_join(continents, dat, by = "continent")
# Plot
ggplot(data = continents) +
geom_sf() +
geom_point(aes(x = centroid_lon, y = centroid_lat, size = count)) +
scale_size(range = c(1, 10)) +
labs(size = "Count") +
theme(axis.title = element_blank())
# It is a good habit to turn S2 back on after you are done
#sf_use_s2(TRUE)
install.packages("sf")
install.packages("rnaturalearth")
install.packages(c("tidyverse", "dplyr", "skimr"))
library(tidyverse)
library(dplyr)
library(skimr)
swu_file_en <- read_csv("Smartwatch usage - english.csv")
swu_file_es <- read_csv("Smartwatch usage - Spanish.csv")
head(swu_file_en)
head(swu_file_es)
